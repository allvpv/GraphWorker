syntax="proto3";
import "google/protobuf/empty.proto";

package worker;

// Interface exported by the worker node.
service Worker {
    rpc AreNodesPresent(NodeIds) returns (ArePresent);
    rpc UpdateDjikstra(stream RequestDjikstra) returns (stream ResponseDjikstra);
    rpc ForgetQuery(ForgetQueryMessage) returns (google.protobuf.Empty);
}

message NodeIds {
    uint64 node_from_id = 1;
    uint64 node_to_id = 2;
}

message ArePresent {
    bool node_from_present = 1;
    bool node_to_present = 2;
}

// Message sent to all involved workers when the query is finished
message ForgetQueryMessage {
    uint32 query_id = 1;
}

message RequestDjikstra {
    message QueryData {
        uint32 query_id = 1;
        uint64 final_node_id = 2;
        optional uint64 smallest_foreign_node = 3;
    }

    message NewDomesticNode {
        uint64 node_id = 1;
        uint64 shortest_path_len = 2;
    }

    // First message in the stream must be `query_data`. Message
    // `new_domestic_node` may appear multiple times in the stream.
    oneof MessageType {
        QueryData query_data = 1;
        NewDomesticNode new_domestic_node = 2;
    }
}

message ResponseDjikstra {
    message Success {
        uint64 node_id = 1;
        uint64 shortest_path_len = 2;
    }

    message NewForeignNode {
        uint64 node_id = 1;
        uint32 worker_id = 2;
        uint64 shortest_path_len = 3;
    }

    message SmallestDomesticNode {
        uint64 shortest_path_len = 1;
    }

    // One success, single `success` message is sent. Otherwise, message
    // `new_foreign_node` may appear multiple times in the stream and last
    // message must be `smallest_domestic_node`.
    oneof MessageType {
        Success success = 1;
        NewForeignNode new_foreign_node = 2;
        SmallestDomesticNode smallest_domestic_node = 3;
    }
}

